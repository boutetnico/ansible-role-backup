---
- name: Ensure backup group exists
  ansible.builtin.group:
    name: "{{ backup_group }}"
    state: present

- name: Ensure backup user exists
  ansible.builtin.user:
    append: "{{ true if backup_extra_groups | length > 0 else false }}"
    group: "{{ backup_user }}"
    groups: "{{ backup_extra_groups }}"
    home: "{{ backup_home_dir }}"
    name: "{{ backup_group }}"
    shell: /bin/bash
    state: present
  when: backup_group != "root"

- name: Ensure dependencies are installed
  ansible.builtin.apt:
    name: "{{ backup_dependencies }}"
    state: present
    update_cache: true

- name: Create required directories
  ansible.builtin.file:
    group: "{{ backup_group }}"
    mode: 0750
    owner: "{{ backup_user }}"
    path: "{{ item }}"
    state: directory
  loop: "{{ [backup_scripts_dir, backup_temp_dir, backup_extra_dir] | flatten }}"

- name: Install backup scripts
  ansible.builtin.template:
    dest: "{{ backup_scripts_dir }}/{{ item.name }}.sh"
    group: "{{ backup_group }}"
    mode: 0750
    owner: "{{ backup_user }}"
    src: "{{ item.script }}.j2"
  loop: "{{ backup_services }}"
  loop_control:
    label: "{{ item.name }}"

- name: Install cron jobs to run backup scripts
  ansible.builtin.cron:
    day: "{{ item.cron.day | d(omit) }}"
    hour: "{{ item.cron.hour | d(omit) }}"
    job: >
      {{ backup_scripts_dir }}/{{ item.name }}.sh
      {{ "2>&1 | /usr/bin/logger -t " ~ backup_cron_syslog_tag ~ item.name
      if backup_cron_syslog_enabled else "" }}
    minute: "{{ item.cron.minute | d(omit) }}"
    name: "Backup {{ item.name }}"
    state: present
    user: "{{ backup_user }}"
    weekday: "{{ item.cron.weekday | d(omit) }}"
  loop: "{{ backup_services }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.cron is defined
